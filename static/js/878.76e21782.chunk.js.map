{"version":3,"file":"static/js/878.76e21782.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/SignUpForm/SignUp.styled.js","components/SignUpForm/SignUp.jsx","page/RegistrationPage.styled.js","page/RegistrationPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport mobileImg from '../../img/home-background-mobile.svg';\nimport tabletImg from '../../img/home-background-tablet.svg';\nimport desktopImg from '../../img/home-background-desktop.svg';\nimport bottle from '../../img/bottle.svg';\nexport const SectionWrapper = styled.section`\n  @media screen and (max-width: 767px) {\n    position: fixed;\n    height: 100%;\n\n    width: 100%;\n    background-image: url(${mobileImg});\n    background-position: center;\n\n    background-size: cover;\n    background-repeat: no-repeat;\n    &::before {\n      content: '';\n      z-index: -1;\n      position: absolute;\n      background-image: url(${bottle});\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -10%);\n      width: 218px;\n      height: 190px;\n      background-size: contain;\n      background-repeat: no-repeat;\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    background-image: url(${tabletImg});\n    background-repeat: no-repeat;\n    background-size: cover;\n    z-index: -10;\n    &::before {\n      z-index: -1;\n      content: '';\n      width: 570px;\n      height: 500px;\n      position: absolute;\n      background-image: url(${bottle});\n      top: 50%;\n      left: 50%;\n      transform: translate(-32%, -70%);\n      background-size: cover;\n      background-repeat: no-repeat;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-height: 100%;\n    background-image: url(${desktopImg});\n    background-position: top;\n    background-size: contain;\n    z-index: -21;\n    &::before {\n      z-index: -1;\n      width: 710px;\n      height: 620px;\n      position: absolute;\n      background-image: url(${bottle});\n      top: 50%;\n      left: 45%;\n      transform: translate(-85%, -60%);\n      background-size: cover;\n      background-repeat: no-repeat;\n    }\n  }\n  @media screen and (min-width: 1440px) {\n    max-height: 100%;\n    &::before {\n      z-index: -1;\n      width: 710px;\n      height: 620px;\n      position: absolute;\n      background-image: url(${bottle});\n      top: 50%;\n      left: 45%;\n      transform: translate(-85%, -60%);\n      background-size: cover;\n      background-repeat: no-repeat;\n    }\n  }\n`;\n","import { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper className='dark-section'>\n      <h2>{title}</h2>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SignupForm = styled.form`\n  @media screen and (min-width: 320px) {\n    display: flex;\n    flex-direction: column;\n    max-width: 280px;\n    h3 {\n      color: var(--primery-color-black);\n      font-size: 26px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 1.2;\n\n      margin-bottom: 16px;\n    }\n    label {\n      color: var(--primery-color-black);\n      font-size: 18px;\n      line-height: 1.3;\n\n      margin-bottom: 8px;\n    }\n    div {\n      display: flex;\n      flex-direction: column;\n      margin-bottom: 16px;\n    }\n    .password-wrapper {\n      display: flex;\n      align-items: center;\n      flex-direction: row;\n      justify-content: space-between;\n\n      padding: 12px 10px;\n      margin: 0;\n\n      border-radius: 6px;\n      background: var(--primery-color-white);\n    }\n    input {\n      border: none;\n      width: 234px;\n\n      color: var(--primery-color-blue);\n      line-height: 1.2;\n    }\n    input:focus {\n      color: var(--primery-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n\n      outline: none;\n    }\n    input::placeholder {\n      color: var(--secondary-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n    }\n    .eye-icon,\n    .eye-icon:hover,\n    .eye-icon:focus {\n      background-color: transparent;\n      box-shadow: none;\n      padding: 0;\n      margin: 0;\n    }\n    svg {\n      fill: var(--primery-color-blue);\n    }\n    button {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 10px;\n      padding: 8px 30px;\n\n      border: none;\n      border-radius: 10px;\n      background: var(--primery-color-blue);\n      box-shadow: 0px 4px 8px 0px rgba(64, 123, 255, 0.34);\n\n      color: var(--primery-color-white);\n      line-height: 1.2;\n      font-weight: 500;\n\n      margin-bottom: 16px;\n    }\n    button:active {\n      box-shadow: none;\n    }\n    button:hover,\n    button:focus {\n      box-shadow: 0px 4px 14px 0px rgba(64, 123, 255, 0.54);\n    }\n    a {\n      color: var(--primery-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n    }\n    a:hover,\n    a:focus {\n      color: #ff9d43;\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    max-width: 336px;\n    input {\n      width: 290px;\n    }\n    button {\n      font-size: 18px;\n      padding: 10px 30px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    min-width: 384px;\n    margin: 140px 0 0 0;\n    input {\n      width: 338px;\n    }\n  }\n`;\nexport const ErrorMessage = styled.span`\n  @media screen and (min-width: 320px) {\n    color: var(--btn-color-red);\n    font-size: 14px;\n    line-height: 1.2;\n\n    margin-top: 8px;\n  }\n`;\n","import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { SignupForm, ErrorMessage } from './SignUp.styled';\nimport icons from '../../img/icons.svg';\nimport { useDispatch } from 'react-redux';\nimport { signupThunk } from 'redux/auth/thunk';\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const validEmailDomains = ['gmail.com', 'i.ua', 'yahoo.com', 'ukr.net'];\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n    validationSchema: Yup.object({\n      email: Yup.string()\n        .email('Invalid email address')\n        .required('Email is required')\n        .matches(new RegExp(`@(${validEmailDomains.join('|')})$`), 'Invalid email domain'),\n      password: Yup.string()\n        .required('Password is required')\n        .min(8, 'Password must be at least 8 characters')\n        .max(64, 'Password must be at most 64 characters'),\n      repeatPassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Password is required'),\n    }),\n    onSubmit: async ({ email, password }) => {\n      try {\n        // console.log('Form data submitted:', { email, password });\n        dispatch(signupThunk({ email, password }));\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n  });\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <SignupForm onSubmit={formik.handleSubmit}>\n      <h3>Sign Up</h3>\n      <label>Enter your email</label>\n      <div>\n        <div\n          className=\"password-wrapper\"\n          style={{\n            border:\n              formik.touched.email && formik.errors.email\n                ? '1px solid var(--btn-color-red)'\n                : '1px solid var(--secondary-color-blue)',\n          }}\n        >\n          <input\n            className='dark-sign-input'\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n            style={{\n              color:\n                formik.touched.email && formik.errors.email\n                  ? 'var(--btn-color-red)'\n                  : 'var(--primery-color-blue)',\n            }}\n          />\n        </div>\n        {formik.touched.email && formik.errors.email ? (\n          <ErrorMessage>{formik.errors.email}</ErrorMessage>\n        ) : null}\n      </div>\n\n      <label>Enter your password</label>\n      <div>\n        <div\n          className=\"password-wrapper\"\n          style={{\n            border:\n              formik.touched.password && formik.errors.password\n                ? '1px solid var(--btn-color-red)'\n                : '1px solid var(--secondary-color-blue)',\n          }}\n        >\n          <input\n            className='dark-sign-input'\n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            placeholder=\"Password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n            style={{\n              color:\n                formik.touched.password && formik.errors.password\n                  ? 'var(--btn-color-red)'\n                  : 'var(--primery-color-blue)',\n            }}\n          />\n          <button type=\"button\" className=\"eye-icon\" onClick={togglePasswordVisibility}>\n            <svg width=\"16\" height=\"16\">\n              <use\n                href={showPassword ? icons + '#icon-opend-eye' : icons + '#icon-closed-eye'}\n              ></use>\n            </svg>\n          </button>\n        </div>\n        {formik.touched.password && formik.errors.password ? (\n          <ErrorMessage>{formik.touched.password && formik.errors.password}</ErrorMessage>\n        ) : null}\n      </div>\n\n      <label>Repeat password</label>\n      <div>\n        <div\n          className=\"password-wrapper\"\n          style={{\n            border:\n              formik.touched.password && formik.errors.password\n                ? '1px solid var(--btn-color-red)'\n                : '1px solid var(--secondary-color-blue)',\n          }}\n        >\n          <input\n            className='dark-sign-input'\n            type={showPassword ? 'text' : 'password'}\n            name=\"repeatPassword\"\n            placeholder=\"Repeat password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.repeatPassword}\n            style={{\n              color:\n                formik.touched.repeatPassword && formik.errors.repeatPassword\n                  ? 'var(--btn-color-red)'\n                  : 'var(--primery-color-blue)',\n            }}\n          />\n          <button type=\"button\" className=\"eye-icon\" onClick={togglePasswordVisibility}>\n            <svg width=\"16\" height=\"16\">\n              <use\n                href={showPassword ? icons + '#icon-opend-eye' : icons + '#icon-closed-eye'}\n              ></use>\n            </svg>\n          </button>\n        </div>\n        {formik.touched.repeatPassword && formik.errors.repeatPassword ? (\n          <ErrorMessage>{formik.errors.repeatPassword}</ErrorMessage>\n        ) : null}\n      </div>\n\n      <button type=\"submit\">Sign Up</button>\n      <NavLink to=\"/signin\">Sign in</NavLink>\n    </SignupForm>\n  );\n};\n\nexport default SignUpForm;\n","import styled from 'styled-components';\nexport const SignupPage = styled.div`\n  @media screen and (min-width: 320px) {\n    max-width: 320px;\n    height: 600px;\n    padding: 0 20px;\n    margin: 0 auto;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n    margin: 0;\n    padding: 0 0 0 32px;\n  }\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n    // padding: 60px 216px 0 600px;\n    // padding: 100px 104px 0 104px;\n    padding: 0 104px;\n    display: flex;\n    justify-content: flex-end;\n    margin: 0 auto;\n  }\n`;\n","import { Section } from 'components/Section/Section';\nimport SignUpForm from 'components/SignUpForm/SignUp';\nimport { SignupPage } from './RegistrationPage.styled';\n\nconst RegistrationPage = () => {\n  return (\n    <Section>\n      {/* <SignupWrapper> */}\n        <SignupPage>\n          <SignUpForm />\n        </SignupPage>\n      {/* </SignupWrapper> */}\n    </Section>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["SectionWrapper","styled","_templateObject","_taggedTemplateLiteral","mobileImg","bottle","tabletImg","desktopImg","Section","_ref","title","children","_jsxs","className","_jsx","SignupForm","ErrorMessage","_templateObject2","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","formik","useFormik","initialValues","email","password","repeatPassword","validationSchema","Yup","required","matches","RegExp","concat","join","min","max","oneOf","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","signupThunk","error","console","stop","_x","apply","arguments","togglePasswordVisibility","handleSubmit","style","border","touched","errors","type","name","placeholder","onChange","handleChange","onBlur","handleBlur","value","values","color","onClick","width","height","href","icons","NavLink","to","SignupPage","SignUpForm"],"sourceRoot":""}